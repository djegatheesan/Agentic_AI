{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOeK012oVX5F0PvdqPtcAAE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install faker"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MTqlRS8QgmJH","executionInfo":{"status":"ok","timestamp":1741285069452,"user_tz":-330,"elapsed":11370,"user":{"displayName":"Jegatheesan D","userId":"11693824998302160727"}},"outputId":"eb50acee-61e1-435a-b5a3-fc6320048c74"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting faker\n","  Downloading faker-36.2.2-py3-none-any.whl.metadata (15 kB)\n","Requirement already satisfied: tzdata in /usr/local/lib/python3.11/dist-packages (from faker) (2025.1)\n","Downloading faker-36.2.2-py3-none-any.whl (1.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m18.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: faker\n","Successfully installed faker-36.2.2\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DzYSX-TOiWi8","executionInfo":{"status":"ok","timestamp":1741285093687,"user_tz":-330,"elapsed":22965,"user":{"displayName":"Jegatheesan D","userId":"11693824998302160727"}},"outputId":"cea02adb-64b5-4790-86b1-65046d83fe41"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5g9oI0A8gPBc","executionInfo":{"status":"ok","timestamp":1741285098316,"user_tz":-330,"elapsed":93,"user":{"displayName":"Jegatheesan D","userId":"11693824998302160727"}},"outputId":"28b4fedb-6b46-4c0f-b19a-b5ee5dfe2ef4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tables created successfully.\n"]}],"source":["import sqlite3\n","\n","# Connect to SQLite database\n","conn = sqlite3.connect(\"retail_db.sqlite\")\n","cursor = conn.cursor()\n","\n","# Creating tables for retail data\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Customers (\n","    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    FirstName TEXT NOT NULL,\n","    LastName TEXT NOT NULL,\n","    Email TEXT UNIQUE NOT NULL,\n","    Phone TEXT,\n","    Address TEXT,\n","    City TEXT,\n","    State TEXT,\n","    ZipCode TEXT\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Products (\n","    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    ProductName TEXT NOT NULL,\n","    Category TEXT NOT NULL,\n","    Price REAL NOT NULL,\n","    StockQuantity INTEGER NOT NULL,\n","    SupplierID INTEGER,\n","    FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID)\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Suppliers (\n","    SupplierID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    SupplierName TEXT NOT NULL,\n","    ContactName TEXT,\n","    Email TEXT UNIQUE NOT NULL,\n","    Phone TEXT,\n","    Address TEXT\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Orders (\n","    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    CustomerID INTEGER NOT NULL,\n","    OrderDate TEXT NOT NULL,\n","    TotalAmount REAL NOT NULL,\n","    Status TEXT NOT NULL CHECK(Status IN ('Pending', 'Shipped', 'Delivered', 'Cancelled')),\n","    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS OrderDetails (\n","    OrderDetailID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    OrderID INTEGER NOT NULL,\n","    ProductID INTEGER NOT NULL,\n","    Quantity INTEGER NOT NULL,\n","    UnitPrice REAL NOT NULL,\n","    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),\n","    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Employees (\n","    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    FirstName TEXT NOT NULL,\n","    LastName TEXT NOT NULL,\n","    Email TEXT UNIQUE NOT NULL,\n","    Phone TEXT,\n","    Position TEXT NOT NULL,\n","    Salary REAL NOT NULL\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Stores (\n","    StoreID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    StoreName TEXT NOT NULL,\n","    Location TEXT NOT NULL\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Shipments (\n","    ShipmentID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    OrderID INTEGER NOT NULL,\n","    ShipmentDate TEXT NOT NULL,\n","    DeliveryDate TEXT,\n","    Carrier TEXT,\n","    Status TEXT NOT NULL CHECK(Status IN ('In Transit', 'Delivered', 'Delayed')),\n","    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Payments (\n","    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    OrderID INTEGER NOT NULL,\n","    PaymentMethod TEXT NOT NULL,\n","    PaymentDate TEXT NOT NULL,\n","    Amount REAL NOT NULL,\n","    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Inventory (\n","    InventoryID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    ProductID INTEGER NOT NULL,\n","    StoreID INTEGER NOT NULL,\n","    StockLevel INTEGER NOT NULL,\n","    LastUpdated TEXT NOT NULL,\n","    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),\n","    FOREIGN KEY (StoreID) REFERENCES Stores(StoreID)\n",");\n","''')\n","\n","cursor.execute('''\n","CREATE TABLE IF NOT EXISTS Discounts (\n","    DiscountID INTEGER PRIMARY KEY AUTOINCREMENT,\n","    ProductID INTEGER,\n","    DiscountPercentage REAL,\n","    StartDate TEXT,\n","    EndDate TEXT,\n","    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)\n",");\n","''')\n","\n","conn.close()\n","\n","print(\"Tables created successfully.\")"]},{"cell_type":"code","source":["import random\n","from faker import Faker\n","from datetime import datetime, timedelta\n","\n","# Initialize Faker for generating fake data\n","fake = Faker()\n","\n","# Connect to SQLite database\n","conn = sqlite3.connect(\"retail_db.sqlite\")\n","cursor = conn.cursor()\n","\n","# Function to generate random date within a range\n","def random_date(start, end):\n","    return (start + timedelta(days=random.randint(0, (end - start).days))).strftime(\"%Y-%m-%d\")\n","\n","# Insert 10,000 rows into Customers\n","def insert_customers(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO Customers (FirstName, LastName, Email, Phone, Address, City, State, ZipCode)\n","        VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',\n","        (fake.first_name(), fake.last_name(), fake.unique.email(), fake.phone_number(),\n","         fake.address(), fake.city(), fake.state(), fake.zipcode()))\n","\n","# Insert 10,000 rows into Suppliers\n","def insert_suppliers(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO Suppliers (SupplierName, ContactName, Email, Phone, Address)\n","        VALUES (?, ?, ?, ?, ?)''',\n","        (fake.company(), fake.name(), fake.unique.email(), fake.phone_number(), fake.address()))\n","\n","# Insert 10,000 rows into Products\n","def insert_products(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO Products (ProductName, Category, Price, StockQuantity, SupplierID)\n","        VALUES (?, ?, ?, ?, ?)''',\n","        (fake.word(), random.choice(['Electronics', 'Clothing', 'Grocery', 'Furniture']),\n","         round(random.uniform(5, 500), 2), random.randint(1, 500), random.randint(1, 10000)))\n","\n","# Insert 10,000 rows into Orders\n","def insert_orders(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO Orders (CustomerID, OrderDate, TotalAmount, Status)\n","        VALUES (?, ?, ?, ?)''',\n","        (random.randint(1, 10000), random_date(datetime(2020, 1, 1), datetime(2023, 12, 31)),\n","         round(random.uniform(10, 1000), 2), random.choice(['Pending', 'Shipped', 'Delivered', 'Cancelled'])))\n","\n","# Insert 10,000 rows into OrderDetails\n","def insert_order_details(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO OrderDetails (OrderID, ProductID, Quantity, UnitPrice)\n","        VALUES (?, ?, ?, ?)''',\n","        (random.randint(1, 10000), random.randint(1, 10000), random.randint(1, 10), round(random.uniform(5, 500), 2)))\n","\n","# Insert 10,000 rows into Employees\n","def insert_employees(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO Employees (FirstName, LastName, Email, Phone, Position, Salary)\n","        VALUES (?, ?, ?, ?, ?, ?)''',\n","        (fake.first_name(), fake.last_name(), fake.unique.email(), fake.phone_number(),\n","         random.choice(['Manager', 'Cashier', 'Sales Associate', 'Warehouse Staff']), round(random.uniform(30000, 100000), 2)))\n","\n","# Insert 10,000 rows into Stores\n","def insert_stores(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO Stores (StoreName, Location)\n","        VALUES (?, ?)''',\n","        (fake.company(), fake.city()))\n","\n","# Insert 10,000 rows into Shipments\n","def insert_shipments(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO Shipments (OrderID, ShipmentDate, DeliveryDate, Carrier, Status)\n","        VALUES (?, ?, ?, ?, ?)''',\n","        (random.randint(1, 10000), random_date(datetime(2021, 1, 1), datetime(2023, 12, 31)),\n","         random_date(datetime(2021, 1, 1), datetime(2023, 12, 31)), fake.company(),\n","         random.choice(['In Transit', 'Delivered', 'Delayed'])))\n","\n","# Insert 10,000 rows into Payments\n","def insert_payments(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO Payments (OrderID, PaymentMethod, PaymentDate, Amount)\n","        VALUES (?, ?, ?, ?)''',\n","        (random.randint(1, 10000), random.choice(['Credit Card', 'PayPal', 'Bank Transfer']),\n","         random_date(datetime(2021, 1, 1), datetime(2023, 12, 31)), round(random.uniform(10, 1000), 2)))\n","\n","# Insert 10,000 rows into Inventory\n","def insert_inventory(n=10000):\n","    for _ in range(n):\n","        cursor.execute('''\n","        INSERT INTO Inventory (ProductID, StoreID, StockLevel, LastUpdated)\n","        VALUES (?, ?, ?, ?)''',\n","        (random.randint(1, 10000), random.randint(1, 10000), random.randint(0, 500),\n","         random_date(datetime(2021, 1, 1), datetime(2023, 12, 31))))\n","\n","# Insert 10,000 rows into Discounts\n","def insert_discounts(n=10000):\n","    for _ in range(n):\n","        product_id = random.randint(1, 1000)  # Assuming there are at least 1000 products\n","        discount_percentage = round(random.uniform(5, 50), 2)  # Random discount between 5% and 50%\n","        start_date = fake.date_between(start_date='-2y', end_date='today')\n","        end_date = start_date + timedelta(days=random.randint(7, 90))  # Discount lasts between 7 and 90 days\n","\n","        cursor.execute('''\n","        INSERT INTO Discounts (ProductID, DiscountPercentage, StartDate, EndDate)\n","        VALUES (?, ?, ?, ?)''',\n","        (product_id, discount_percentage, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d')))\n","\n","# Populate all tables with 10,000 records each\n","insert_customers()\n","insert_suppliers()\n","insert_products()\n","insert_orders()\n","insert_order_details()\n","insert_employees()\n","insert_stores()\n","insert_shipments()\n","insert_payments()\n","insert_inventory()\n","\n","# Commit and close connection\n","conn.commit()\n","conn.close()\n","\n","print(\"10,000 records inserted into each table successfully.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zb34p7lDhdV6","executionInfo":{"status":"ok","timestamp":1741285127757,"user_tz":-330,"elapsed":16240,"user":{"displayName":"Jegatheesan D","userId":"11693824998302160727"}},"outputId":"7e5fbde2-4422-4ba1-b8ad-0f4ccb17c565"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["10,000 records inserted into each table successfully.\n"]}]},{"cell_type":"code","source":["import sqlite3\n","import pandas as pd\n","\n","# Connect to SQLite database\n","conn = sqlite3.connect(\"retail_db.sqlite\")\n","\n","# Read data from a table (e.g., Customers)\n","query = \"SELECT * FROM Customers\"\n","df = pd.read_sql_query(query, conn)\n","\n","# Display first few rows\n","print(df.head())\n","\n","# Close connection\n","conn.close()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QJYzzzYjhEGS","executionInfo":{"status":"ok","timestamp":1741285134800,"user_tz":-330,"elapsed":319,"user":{"displayName":"Jegatheesan D","userId":"11693824998302160727"}},"outputId":"1a57505b-0134-4a00-9f79-8bd562985130"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["   CustomerID FirstName   LastName                         Email  \\\n","0           1     Tonya      Cross  christopherhayes@example.net   \n","1           2    Pamela        Cox           scott73@example.org   \n","2           3    Adrian    Coleman      nicolethomas@example.com   \n","3           4       Joe      Logan            qdavis@example.net   \n","4           5   Shannon  Hernandez      johnsondavid@example.com   \n","\n","                Phone                                            Address  \\\n","0    999-627-1300x660    4147 Gilbert Key Apt. 899\\nTammymouth, GA 53786   \n","1     +1-311-699-6395            892 Jason Villages\\nWebbburgh, FM 62760   \n","2  516-567-8721x42244            34749 Garcia Locks\\nTammyside, MD 44475   \n","3  383-852-6162x01173  2276 Phillip Mountains Suite 471\\nLake Anna, V...   \n","4    324.772.5859x233             6764 Amy Creek\\nJacksonmouth, RI 98254   \n","\n","           City          State ZipCode  \n","0   Bonniemouth  West Virginia   89438  \n","1    Weberburgh     New Jersey   98595  \n","2     Scottfurt        Arizona   25325  \n","3  Amberborough         Kansas   14761  \n","4  West Codyton  New Hampshire   09085  \n"]}]},{"cell_type":"code","source":["# Function to generate metadata\n","def generate_metadata():\n","    metadata = []\n","    tables = {\n","        \"Customers\": [\n","            (\"CustomerID\", \"Unique ID for each customer\", \"Primary Key\"),\n","            (\"FirstName\", \"Customer's first name\", \"\"),\n","            (\"LastName\", \"Customer's last name\", \"\"),\n","            (\"Email\", \"Customer's email address\", \"Unique\"),\n","            (\"Phone\", \"Customer's phone number\", \"\"),\n","            (\"Address\", \"Customer's address\", \"\"),\n","            (\"City\", \"City of residence\", \"\"),\n","            (\"State\", \"State of residence\", \"\"),\n","            (\"ZipCode\", \"Postal code of residence\", \"\")\n","        ],\n","        \"Suppliers\": [\n","            (\"SupplierID\", \"Unique ID for each supplier\", \"Primary Key\"),\n","            (\"SupplierName\", \"Name of the supplier\", \"\"),\n","            (\"ContactName\", \"Contact person's name\", \"\"),\n","            (\"Email\", \"Supplier's email address\", \"Unique\"),\n","            (\"Phone\", \"Supplier's phone number\", \"\"),\n","            (\"Address\", \"Supplier's address\", \"\")\n","        ],\n","        \"Products\": [\n","            (\"ProductID\", \"Unique ID for each product\", \"Primary Key\"),\n","            (\"ProductName\", \"Name of the product\", \"\"),\n","            (\"Category\", \"Category of the product\", \"\"),\n","            (\"Price\", \"Price of the product\", \"\"),\n","            (\"StockQuantity\", \"Quantity of product in stock\", \"\"),\n","            (\"SupplierID\", \"Supplier providing the product\", \"Foreign Key\")\n","        ],\n","        \"Orders\": [\n","            (\"OrderID\", \"Unique ID for each order\", \"Primary Key\"),\n","            (\"CustomerID\", \"Customer placing the order\", \"Foreign Key\"),\n","            (\"OrderDate\", \"Date when the order was placed\", \"\"),\n","            (\"TotalAmount\", \"Total amount for the order\", \"\"),\n","            (\"Status\", \"Current status of the order\", \"\")\n","        ],\n","        \"OrderDetails\": [\n","            (\"OrderDetailID\", \"Unique ID for each order detail\", \"Primary Key\"),\n","            (\"OrderID\", \"Associated order\", \"Foreign Key\"),\n","            (\"ProductID\", \"Associated product\", \"Foreign Key\"),\n","            (\"Quantity\", \"Quantity ordered\", \"\"),\n","            (\"UnitPrice\", \"Price per unit\", \"\")\n","        ],\n","        \"Employees\": [\n","            (\"EmployeeID\", \"Unique ID for each employee\", \"Primary Key\"),\n","            (\"FirstName\", \"Employee's first name\", \"\"),\n","            (\"LastName\", \"Employee's last name\", \"\"),\n","            (\"Email\", \"Employee's email address\", \"Unique\"),\n","            (\"Phone\", \"Employee's phone number\", \"\"),\n","            (\"Position\", \"Employee's job position\", \"\"),\n","            (\"Salary\", \"Employee's salary\", \"\")\n","        ],\n","        \"Payments\": [\n","            (\"PaymentID\", \"Unique ID for each payment\", \"Primary Key\"),\n","            (\"OrderID\", \"Associated order\", \"Foreign Key\"),\n","            (\"PaymentMethod\", \"Method of payment\", \"\"),\n","            (\"PaymentDate\", \"Date of payment\", \"\"),\n","            (\"Amount\", \"Amount paid\", \"\")\n","        ],\n","        \"Inventory\": [\n","            (\"InventoryID\", \"Unique ID for inventory record\", \"Primary Key\"),\n","            (\"ProductID\", \"Associated product\", \"Foreign Key\"),\n","            (\"StoreID\", \"Associated store\", \"Foreign Key\"),\n","            (\"StockLevel\", \"Stock level at the store\", \"\"),\n","            (\"LastUpdated\", \"Last update timestamp\", \"\")\n","        ],\n","        \"Discounts\": [\n","            (\"DiscountID\", \"Unique ID for discount\", \"Primary Key\"),\n","            (\"ProductID\", \"Associated product\", \"Foreign Key\"),\n","            (\"DiscountPercentage\", \"Discount percentage applied\", \"\"),\n","            (\"StartDate\", \"Start date of discount\", \"\"),\n","            (\"EndDate\", \"End date of discount\", \"\")\n","        ],\n","        \"Stores\": [\n","            (\"StoreID\", \"Unique ID for each store\", \"Primary Key\"),\n","            (\"StoreName\", \"Name of the store\", \"\"),\n","            (\"Location\", \"Location of the store\", \"\")\n","        ],\n","        \"Shipments\": [\n","            (\"ShipmentID\", \"Unique ID for each shipment\", \"Primary Key\"),\n","            (\"OrderID\", \"Associated order\", \"Foreign Key\"),\n","            (\"ShipmentDate\", \"Date when the shipment was sent\", \"\"),\n","            (\"DeliveryDate\", \"Estimated delivery date\", \"\"),\n","            (\"Carrier\", \"Shipping carrier name\", \"\"),\n","            (\"Status\", \"Current status of the shipment\", \"\")\n","        ]\n","    }\n","\n","    for table, columns in tables.items():\n","        for col in columns:\n","            metadata.append((table, col[0], col[1], col[2]))\n","\n","    df_metadata = pd.DataFrame(metadata, columns=[\"Table Name\", \"Column Name\", \"Description\", \"Key Type\"])\n","    df_metadata.to_excel(\"/content/drive/My Drive/Colab Notebooks/Agentic_AI/metadata.xlsx\", index=False)\n","    print(\"Metadata file saved in Google Drive as retail_metadata.xlsx\")\n","\n","# Generate metadata\n","generate_metadata()\n","\n","print(\"Metadata generation complete.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uQ736-gnmTf3","executionInfo":{"status":"ok","timestamp":1741285142937,"user_tz":-330,"elapsed":1667,"user":{"displayName":"Jegatheesan D","userId":"11693824998302160727"}},"outputId":"ba00e668-adce-44b2-c413-dc9ee8799267"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Metadata file saved in Google Drive as retail_metadata.xlsx\n","Metadata generation complete.\n"]}]}]}