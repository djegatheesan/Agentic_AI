# -*- coding: utf-8 -*-
"""sample_data_generation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15ab7B3zWdT1PjVU9xkROG9YIawQky04C
"""

pip install faker

from google.colab import drive
drive.mount('/content/drive')

import sqlite3

# Connect to SQLite database
conn = sqlite3.connect("retail_db.sqlite")
cursor = conn.cursor()

# Creating tables for retail data
cursor.execute('''
CREATE TABLE IF NOT EXISTS Customers (
    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,
    FirstName TEXT NOT NULL,
    LastName TEXT NOT NULL,
    Email TEXT NOT NULL,
    Phone TEXT,
    Address TEXT,
    City TEXT,
    State TEXT,
    ZipCode TEXT
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Products (
    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,
    ProductName TEXT NOT NULL,
    Category TEXT NOT NULL,
    Price REAL NOT NULL,
    StockQuantity INTEGER NOT NULL,
    SupplierID INTEGER,
    FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID)
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Suppliers (
    SupplierID INTEGER PRIMARY KEY AUTOINCREMENT,
    SupplierName TEXT NOT NULL,
    ContactName TEXT,
    Email TEXT NOT NULL,
    Phone TEXT,
    Address TEXT
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Orders (
    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,
    CustomerID INTEGER NOT NULL,
    OrderDate TEXT NOT NULL,
    TotalAmount REAL NOT NULL,
    Status TEXT NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS OrderDetails (
    OrderDetailID INTEGER PRIMARY KEY AUTOINCREMENT,
    OrderID INTEGER NOT NULL,
    ProductID INTEGER NOT NULL,
    Quantity INTEGER NOT NULL,
    UnitPrice REAL NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Employees (
    EmployeeID INTEGER PRIMARY KEY AUTOINCREMENT,
    FirstName TEXT NOT NULL,
    LastName TEXT NOT NULL,
    Email TEXT UNIQUE NOT NULL,
    Phone TEXT,
    Position TEXT NOT NULL,
    Salary REAL NOT NULL
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Stores (
    StoreID INTEGER PRIMARY KEY AUTOINCREMENT,
    StoreName TEXT NOT NULL,
    Location TEXT NOT NULL
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Shipments (
    ShipmentID INTEGER PRIMARY KEY AUTOINCREMENT,
    OrderID INTEGER NOT NULL,
    ShipmentDate TEXT NOT NULL,
    DeliveryDate TEXT,
    Carrier TEXT,
    Status TEXT NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Payments (
    PaymentID INTEGER PRIMARY KEY AUTOINCREMENT,
    OrderID INTEGER NOT NULL,
    PaymentMethod TEXT NOT NULL,
    PaymentDate TEXT NOT NULL,
    Amount REAL NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Inventory (
    InventoryID INTEGER PRIMARY KEY AUTOINCREMENT,
    ProductID INTEGER NOT NULL,
    StoreID INTEGER NOT NULL,
    StockLevel INTEGER NOT NULL,
    LastUpdated TEXT NOT NULL,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (StoreID) REFERENCES Stores(StoreID)
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS Discounts (
    DiscountID INTEGER PRIMARY KEY AUTOINCREMENT,
    ProductID INTEGER,
    DiscountPercentage REAL,
    StartDate TEXT,
    EndDate TEXT,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
''')

conn.close()

print("Tables created successfully.")

import random
from faker import Faker
from datetime import datetime, timedelta

# Initialize Faker for generating fake data
fake = Faker()

# Connect to SQLite database
conn = sqlite3.connect("retail_db.sqlite")
cursor = conn.cursor()

# Function to generate random date within a range
def random_date(start, end):
    return (start + timedelta(days=random.randint(0, (end - start).days))).strftime("%Y-%m-%d")

# Insert 10,000 rows into Customers
def insert_customers(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO Customers (FirstName, LastName, Email, Phone, Address, City, State, ZipCode)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)''',
        (fake.first_name(), fake.last_name(), fake.unique.email(), fake.phone_number(),
         fake.address(), fake.city(), fake.state(), fake.zipcode()))

# Insert 10,000 rows into Suppliers
def insert_suppliers(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO Suppliers (SupplierName, ContactName, Email, Phone, Address)
        VALUES (?, ?, ?, ?, ?)''',
        (fake.company(), fake.name(), fake.unique.email(), fake.phone_number(), fake.address()))

# Insert 10,000 rows into Products
def insert_products(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO Products (ProductName, Category, Price, StockQuantity, SupplierID)
        VALUES (?, ?, ?, ?, ?)''',
        (fake.word(), random.choice(['Electronics', 'Clothing', 'Grocery', 'Furniture']),
         round(random.uniform(5, 500), 2), random.randint(1, 500), random.randint(1, 10000)))

# Insert 10,000 rows into Orders
def insert_orders(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO Orders (CustomerID, OrderDate, TotalAmount, Status)
        VALUES (?, ?, ?, ?)''',
        (random.randint(1, 10000), random_date(datetime(2020, 1, 1), datetime(2023, 12, 31)),
         round(random.uniform(10, 1000), 2), random.choice(['Pending', 'Shipped', 'Delivered', 'Cancelled'])))

# Insert 10,000 rows into OrderDetails
def insert_order_details(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO OrderDetails (OrderID, ProductID, Quantity, UnitPrice)
        VALUES (?, ?, ?, ?)''',
        (random.randint(1, 10000), random.randint(1, 10000), random.randint(1, 10), round(random.uniform(5, 500), 2)))

# Insert 10,000 rows into Employees
def insert_employees(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO Employees (FirstName, LastName, Email, Phone, Position, Salary)
        VALUES (?, ?, ?, ?, ?, ?)''',
        (fake.first_name(), fake.last_name(), fake.unique.email(), fake.phone_number(),
         random.choice(['Manager', 'Cashier', 'Sales Associate', 'Warehouse Staff']), round(random.uniform(30000, 100000), 2)))

# Insert 10,000 rows into Stores
def insert_stores(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO Stores (StoreName, Location)
        VALUES (?, ?)''',
        (fake.company(), fake.city()))

# Insert 10,000 rows into Shipments
def insert_shipments(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO Shipments (OrderID, ShipmentDate, DeliveryDate, Carrier, Status)
        VALUES (?, ?, ?, ?, ?)''',
        (random.randint(1, 10000), random_date(datetime(2021, 1, 1), datetime(2023, 12, 31)),
         random_date(datetime(2021, 1, 1), datetime(2023, 12, 31)), fake.company(),
         random.choice(['In Transit', 'Delivered', 'Delayed'])))

# Insert 10,000 rows into Payments
def insert_payments(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO Payments (OrderID, PaymentMethod, PaymentDate, Amount)
        VALUES (?, ?, ?, ?)''',
        (random.randint(1, 10000), random.choice(['Credit Card', 'PayPal', 'Bank Transfer']),
         random_date(datetime(2021, 1, 1), datetime(2023, 12, 31)), round(random.uniform(10, 1000), 2)))

# Insert 10,000 rows into Inventory
def insert_inventory(n=10000):
    for _ in range(n):
        cursor.execute('''
        INSERT INTO Inventory (ProductID, StoreID, StockLevel, LastUpdated)
        VALUES (?, ?, ?, ?)''',
        (random.randint(1, 10000), random.randint(1, 10000), random.randint(0, 500),
         random_date(datetime(2021, 1, 1), datetime(2023, 12, 31))))

# Insert 10,000 rows into Discounts
def insert_discounts(n=10000):
    for _ in range(n):
        product_id = random.randint(1, 1000)  # Assuming there are at least 1000 products
        discount_percentage = round(random.uniform(5, 50), 2)  # Random discount between 5% and 50%
        start_date = fake.date_between(start_date='-2y', end_date='today')
        end_date = start_date + timedelta(days=random.randint(7, 90))  # Discount lasts between 7 and 90 days

        cursor.execute('''
        INSERT INTO Discounts (ProductID, DiscountPercentage, StartDate, EndDate)
        VALUES (?, ?, ?, ?)''',
        (product_id, discount_percentage, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d')))

# Populate all tables with 10,000 records each
insert_customers()
insert_suppliers()
insert_products()
insert_orders()
insert_order_details()
insert_employees()
insert_stores()
insert_shipments()
insert_payments()
insert_inventory()

# Commit and close connection
conn.commit()
conn.close()

print("10,000 records inserted into each table successfully.")

import sqlite3
import pandas as pd

# Connect to SQLite database
conn = sqlite3.connect("retail_db.sqlite")

# Read data from a table (e.g., Customers)
query = "SELECT * FROM Customers"
df = pd.read_sql_query(query, conn)

# Display first few rows
print(df.head())

# Close connection
conn.close()

# Function to generate metadata
def generate_metadata():
    metadata = []
    tables = {
        "Customers": [
            ("CustomerID", "Unique ID for each customer", "Primary Key"),
            ("FirstName", "Customer's first name", ""),
            ("LastName", "Customer's last name", ""),
            ("Email", "Customer's email address", "Unique"),
            ("Phone", "Customer's phone number", ""),
            ("Address", "Customer's address", ""),
            ("City", "City of residence", ""),
            ("State", "State of residence", ""),
            ("ZipCode", "Postal code of residence", "")
        ],
        "Suppliers": [
            ("SupplierID", "Unique ID for each supplier", "Primary Key"),
            ("SupplierName", "Name of the supplier", ""),
            ("ContactName", "Contact person's name", ""),
            ("Email", "Supplier's email address", "Unique"),
            ("Phone", "Supplier's phone number", ""),
            ("Address", "Supplier's address", "")
        ],
        "Products": [
            ("ProductID", "Unique ID for each product", "Primary Key"),
            ("ProductName", "Name of the product", ""),
            ("Category", "Category of the product", ""),
            ("Price", "Price of the product", ""),
            ("StockQuantity", "Quantity of product in stock", ""),
            ("SupplierID", "Supplier providing the product", "Foreign Key")
        ],
        "Orders": [
            ("OrderID", "Unique ID for each order", "Primary Key"),
            ("CustomerID", "Customer placing the order", "Foreign Key"),
            ("OrderDate", "Date when the order was placed", ""),
            ("TotalAmount", "Total amount for the order", ""),
            ("Status", "Current status of the order", "")
        ],
        "OrderDetails": [
            ("OrderDetailID", "Unique ID for each order detail", "Primary Key"),
            ("OrderID", "Associated order", "Foreign Key"),
            ("ProductID", "Associated product", "Foreign Key"),
            ("Quantity", "Quantity ordered", ""),
            ("UnitPrice", "Price per unit", "")
        ],
        "Employees": [
            ("EmployeeID", "Unique ID for each employee", "Primary Key"),
            ("FirstName", "Employee's first name", ""),
            ("LastName", "Employee's last name", ""),
            ("Email", "Employee's email address", "Unique"),
            ("Phone", "Employee's phone number", ""),
            ("Position", "Employee's job position", ""),
            ("Salary", "Employee's salary", "")
        ],
        "Payments": [
            ("PaymentID", "Unique ID for each payment", "Primary Key"),
            ("OrderID", "Associated order", "Foreign Key"),
            ("PaymentMethod", "Method of payment", ""),
            ("PaymentDate", "Date of payment", ""),
            ("Amount", "Amount paid", "")
        ],
        "Inventory": [
            ("InventoryID", "Unique ID for inventory record", "Primary Key"),
            ("ProductID", "Associated product", "Foreign Key"),
            ("StoreID", "Associated store", "Foreign Key"),
            ("StockLevel", "Stock level at the store", ""),
            ("LastUpdated", "Last update timestamp", "")
        ],
        "Discounts": [
            ("DiscountID", "Unique ID for discount", "Primary Key"),
            ("ProductID", "Associated product", "Foreign Key"),
            ("DiscountPercentage", "Discount percentage applied", ""),
            ("StartDate", "Start date of discount", ""),
            ("EndDate", "End date of discount", "")
        ],
        "Stores": [
            ("StoreID", "Unique ID for each store", "Primary Key"),
            ("StoreName", "Name of the store", ""),
            ("Location", "Location of the store", "")
        ],
        "Shipments": [
            ("ShipmentID", "Unique ID for each shipment", "Primary Key"),
            ("OrderID", "Associated order", "Foreign Key"),
            ("ShipmentDate", "Date when the shipment was sent", ""),
            ("DeliveryDate", "Estimated delivery date", ""),
            ("Carrier", "Shipping carrier name", ""),
            ("Status", "Current status of the shipment", "")
        ]
    }

    for table, columns in tables.items():
        for col in columns:
            metadata.append((table, col[0], col[1], col[2]))

    df_metadata = pd.DataFrame(metadata, columns=["Table Name", "Column Name", "Description", "Key Type"])
    df_metadata.to_excel("/content/drive/My Drive/Colab Notebooks/Agentic_AI/metadata.xlsx", index=False)
    print("Metadata file saved in Google Drive as retail_metadata.xlsx")

# Generate metadata
generate_metadata()

print("Metadata generation complete.")

import random
from faker import Faker
from datetime import datetime, timedelta

# Initialize Faker for generating random data
fake = Faker()

# Connect to the SQLite database (create it if it doesn't exist)
conn = sqlite3.connect('retail_db.sqlite')
cursor = conn.cursor()

# Helper function to introduce anomalies
def introduce_anomalies(value, anomaly_type):
    if anomaly_type == "duplicate":
        return value
    elif anomaly_type == "negative":
        return -abs(value) if isinstance(value, (int, float)) else value
    elif anomaly_type == "missing":
        return None
    elif anomaly_type == "invalid_format":
        return "invalid_format"
    elif anomaly_type == "out_of_range":
        return 999999  # Arbitrary out-of-range value
    else:
        return value

# Generate random data for the Customers table
def insert_customers(num_records):
    for _ in range(num_records):
        first_name = fake.first_name()
        last_name = fake.last_name()
        email = introduce_anomalies(fake.unique.email(), "duplicate" if random.random() < 0.01 else None)
        phone = introduce_anomalies(fake.phone_number(), "missing" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Customers (FirstName, LastName, Email, Phone, Address, City, State, ZipCode)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (first_name, last_name, email, phone, fake.address(), fake.city(), fake.state_abbr(), fake.zipcode()))

# Generate random data for the Products table
def insert_products(num_records):
    categories = ['Electronics', 'Gadgets', 'Books', 'Clothing', 'Toys']
    for _ in range(num_records):
        product_name = fake.word()
        price = introduce_anomalies(round(random.uniform(10.0, 1000.0), 2), "negative" if random.random() < 0.01 else None)
        stock_quantity = introduce_anomalies(random.randint(0, 500), "negative" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Products (ProductName, Category, Price, StockQuantity, SupplierID)
            VALUES (?, ?, ?, ?, ?)
        ''', (product_name, random.choice(categories), price, stock_quantity, random.randint(1, 50)))

# Generate random data for the Suppliers table
def insert_suppliers(num_records):
    for _ in range(num_records):
        supplier_name = fake.company()
        email = introduce_anomalies(fake.unique.email(), "invalid_format" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Suppliers (SupplierName, ContactName, Email, Phone, Address)
            VALUES (?, ?, ?, ?, ?)
        ''', (supplier_name, fake.name(), email, fake.phone_number(), fake.address()))

# Generate random data for the Orders table
def insert_orders(num_records):
    statuses = ['Pending', 'Shipped', 'Delivered', 'Cancelled']
    for _ in range(num_records):
        total_amount = introduce_anomalies(round(random.uniform(50.0, 5000.0), 2), "negative" if random.random() < 0.01 else None)
        status = introduce_anomalies(random.choice(statuses), "invalid_format" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Orders (CustomerID, OrderDate, TotalAmount, Status)
            VALUES (?, ?, ?, ?)
        ''', (random.randint(1, 5000), fake.date_this_year(), total_amount, status))

# Generate random data for the OrderDetails table
def insert_order_details(num_records):
    for _ in range(num_records):
        quantity = introduce_anomalies(random.randint(1, 10), "negative" if random.random() < 0.01 else None)
        unit_price = introduce_anomalies(round(random.uniform(10.0, 1000.0), 2), "negative" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO OrderDetails (OrderID, ProductID, Quantity, UnitPrice)
            VALUES (?, ?, ?, ?)
        ''', (random.randint(1, 10000), random.randint(1, 2000), quantity, unit_price))

# Generate random data for the Employees table
def insert_employees(num_records):
    for _ in range(num_records):
        salary = introduce_anomalies(round(random.uniform(3000.0, 10000.0), 2), "negative" if random.random() < 0.01 else None)
        phone = introduce_anomalies(fake.phone_number(), "missing" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Employees (FirstName, LastName, Email, Phone, Position, Salary)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (fake.first_name(), fake.last_name(), fake.unique.email(), phone, fake.job(), salary))

# Generate random data for the Stores table
def insert_stores(num_records):
    for _ in range(num_records):
        store_name = introduce_anomalies(fake.company(), "duplicate" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Stores (StoreName, Location)
            VALUES (?, ?)
        ''', (store_name, fake.city()))

# Generate random data for the Shipments table
def insert_shipments(num_records):
    statuses = ['In Transit', 'Delivered', 'Delayed']
    for _ in range(num_records):
        delivery_date = introduce_anomalies(fake.date_this_year(), "missing" if random.random() < 0.01 else None)
        status = introduce_anomalies(random.choice(statuses), "invalid_format" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Shipments (OrderID, ShipmentDate, DeliveryDate, Carrier, Status)
            VALUES (?, ?, ?, ?, ?)
        ''', (random.randint(1, 10000), fake.date_this_year(), delivery_date, fake.company(), status))

# Generate random data for the Payments table
def insert_payments(num_records):
    for _ in range(num_records):
        amount = introduce_anomalies(round(random.uniform(50.0, 5000.0), 2), "negative" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Payments (OrderID, PaymentMethod, PaymentDate, Amount)
            VALUES (?, ?, ?, ?)
        ''', (random.randint(1, 10000), fake.credit_card_provider(), fake.date_this_year(), amount))

# Generate random data for the Inventory table
def insert_inventory(num_records):
    for _ in range(num_records):
        stock_level = introduce_anomalies(random.randint(0, 1000), "negative" if random.random() < 0.01 else None)
        last_updated = introduce_anomalies(fake.date_this_year(), "out_of_range" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Inventory (ProductID, StoreID, StockLevel, LastUpdated)
            VALUES (?, ?, ?, ?)
        ''', (random.randint(1, 2000), random.randint(1, 100), stock_level, last_updated))

# Generate random data for the Discounts table
def insert_discounts(num_records):
    for _ in range(num_records):
        discount_percentage = introduce_anomalies(round(random.uniform(5.0, 50.0), 2), "out_of_range" if random.random() < 0.01 else None)
        cursor.execute('''
            INSERT INTO Discounts (ProductID, DiscountPercentage, StartDate, EndDate)
            VALUES (?, ?, ?, ?)
        ''', (random.randint(1, 2000), discount_percentage, fake.date_this_year(), fake.date_this_year()))

# Insert data for all tables
insert_customers(5000)
insert_suppliers(1000)
insert_products(2000)
insert_orders(10000)
insert_order_details(20000)
insert_employees(1000)
insert_stores(100)
insert_shipments(5000)
insert_payments(5000)
insert_inventory(10000)
insert_discounts(2000)

# Commit changes and close the connection
conn.commit()
conn.close()

print("Data insertion completed with anomalies!")